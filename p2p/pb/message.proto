syntax = "proto3";

package pb;
option go_package = "pb";


// Handshake protocol data used for both request and response - sent unencrypted over the wire
message HandshakeData {
    bytes sessionId = 1;    // for req - same as iv. for response - set to req id
    bytes payload = 2; // empty for now
    int64 timestamp = 3; // sending time
    string clientVersion = 4; // client version of the sender
    int32 networkID = 5; // network id of sending node
    string protocol = 6; // 'handshake/req' || 'handshake/resp'
    bytes nodePubKey = 7; // 65 bytes uncompressed
    bytes iv = 8; // 16 bytes - AES-256-CBC IV
    bytes pubKey = 9; // 65 bytes (uncompressed) ephemeral public key
    bytes hmac = 10; // HMAC-SHA-256 32 bytes
    string sign = 11; // hex encoded string 32 bytes sign of all above data by node public key (verifies he has the priv key and he wrote the data
    uint32 port = 12; // the port this node listens on, omitted or handshake responses.
}

// just here for now

// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multi310.445plexing back to higher level protocols
// data is here and not in CommonMessageData to avoid leaked data on unencrypted connections
message ProtocolMessage {
    Metadata metadata = 1;
       oneof data {
         bytes payload = 2;
         MessageWrapper msg = 3;
        }
}

message Metadata {
    string nextProtocol = 1;      // Protocol id string
    string clientVersion = 2; // Author client version
    int64 timestamp = 3;      // Unix time - authoring time (not sending time)
    bytes authPubKey = 4;     // Authoring node Secp256k1 public key (32bytes) - may not be sender
    bytes msgSign = 5;        // Signature of message data by author + method specific data by message creator node. format: hexEncode([]bytes)
}

message MessageWrapper {
     uint32 type = 1; //msg type
     bool req = 2;   // Req or Resp, 0 - req / 1 - resp
     uint64 reqID = 3;
     bytes payload = 4; //encapsulated msg
}
